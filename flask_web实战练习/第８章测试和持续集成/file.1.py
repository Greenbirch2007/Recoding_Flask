# 第8章 测试和持续集成

#测试的原因
# １．测试可以保证代码在预想的情况下正常工作
# ２．确保对代码的改动不会破坏现有的功能
# ３．　良好的测试要求业务代码模块化，代码耦合度低，这在一定程度上保证了业务代码的质量



# 使用unittest和doctest做测试

# unittest是Python标准库中用于单元测试的模块.单元测试用来对最小可测试单元进行正确性检验.
# 单元测试的价值在于维护现有功能时,尤其是不熟悉现有功能的新人,可以通过单元测试确认对代码的修改是否引入了新的错误或导致旧代码错误,
# 帮助我们在上线之前发现问题

# 下面通过测试collections模块中的Counter类.来了解unittest的用法
# setup方法列出了测试前的准备工作,常用来做一些初始化,非必需方法.tearDown方法列出了测试完成后的收尾工作,用来销毁测试过程中产生的影响,非必需方法,但是应该合理使用.
#　TestCase，表示测试用力，单元测试都是使用这样的断言语句来判断测试是否通过：如果断言为false，会抛出AssertionError异常，测试框架就会认为
# 测试用例测试失败

# 另外一个常见的测试用法是使用unittest.TestSuite(测试套件),它将一组测试用例作为一个测试对象()

# doctest  是一个直观的表述型测试方法,它通过查找代码文件里文档字符串中的交互式会话部分,执行那些会话一验证代码工作是否正好正常.给功能 函数添加doctest是一个好习惯


#　使用py.test和mock　