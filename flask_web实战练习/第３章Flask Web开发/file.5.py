# 模板
#　视图函数直接返回文本，而在实际生产环境中其实很少这样用，因为实际的页面大多数是带有样式和复杂逻辑的html代码，这可以让浏览器渲染出非常漂亮和复杂的效果
# 页面内容应该是可重用的，而且需要执行更高级的功能。首先，看一下python自带的模板string.Template

# 自带的模板支持有限，不能写控制语句，无法继承重用。所以要用第三方模板系统，主要是jinja2  和mako

# jinja2是flask默认的模仿Django模板的一个模板引擎，提供了而可选的沙箱模板来保证执行环境的安全，优点如下

# 1.让html设计者和后端python开发工作分离
#　2.减少使用python的复杂程度，页面逻辑应该独立于业务逻辑，这样才能开发出易于维护的程序
# 3. 模板非常灵活，快速和安全，对设计者和开发者更加友好
# 4.提供了控制语句，继承等高级功能，减少开发的复杂度


# api的基本使用方式
# jinja2通过Template类创建并渲染模板
# enviroment的实例用于存储配置和全局对象，然后从文件系统或其他位置加载模板
# 通过environment创建了一个模板环境，模板加载器(loader)会在templates文件夹中寻找模板。因为这里是测试，所以只是用到app.py这个空文件作为包名

# 使用模板加载器的另一个明显的好处就是可以支持模板继承
# jinja2的基本语法
# 模板仅仅是文本文件，他可以使用任何基于文本的格式(html,xml..csv,latex等)，它并没有特定的扩展名，通常使用.html作为后缀名。模板包含"变量"或
# “表达式”,这两者在模板求值的时候会被替换为值。模板中还有标签和控制语句
# 　每中分隔符豆瓣开始标记和结束标记
#　｛＃＃｝模板注释。它不会出现在渲染的页面里
#   {%  % } 用于执行诸如for 循环或赋值的语句
# { { }}  英语把表达式的结果输出到模板上
# 应用把变量传递到模板，可以使用点(.)来访问变量的属性，也可以使用中括号语法([])
# trim是一个过滤器，在模板中通通过管道符号（|）把变量和过滤器分开。也可以使用多个过滤器，如{{title|trim|striptags}}，striptags也是一个过滤器

# 模板继承
# 合理使用模板继承，让模板能重用，能提高工作效率和代码质量
# 首先，定义一个基础的“骨架”模板(base.html)

# {% block xxx%}  .. {% endblock %}是一个代码块，可以在子模板重载
# head的代码快有默认内容，而content和footer都是没有内容的。这3个块需要在子模板中被重载，如果子模板没有重载，就用这个基类模板中被重载，如果
#　子模板没有重载，就用这个基类模板的定义显示默认内容。
# 子模板有如下细节：
# １．index.html继承了base.html里面额内容。extends标签应该在模板中一开始就使用
# ２．　标题被重载，换成了"Index -My Webpage"
# 3. head块被重载。但是首先使用了super(),表示先使用base.html的head块的呢日用，再基于此添加css样式
# 4. content块被重载，其中在块的结束标签中加入了名称，这样可以改善模板的可读性
# ５．footer没有被重载，什么都不显示

# 如果你想要多次使用一个块，可以使用特殊的"self"变量并调用与块同名的函数

#　宏
# 宏类似常规编程语言中的函数。它用于把常用行为抽象成可重用的函数。可以像函数一眼调用宏

# 赋值
# 　在代码块中，也可以变为变量赋值。赋值使用set标签，并且可以为多个变量赋值

# include
# include语句用于包含一个模板，渲染时会在include语句的对应位置添加被包含的模板内容

# import
# jinja2支持在不同的模板中导入宏并使用，与python中的import语句类似。有两种方法来导入模板：
#　可以把整个模板导入到一个变量(import xx) 或从其中导入特定的宏(from xx import yy)
