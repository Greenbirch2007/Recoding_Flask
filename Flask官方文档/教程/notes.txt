
项目布局  （整理出一个项目布局）

1. flaskr/  ，一个包含应用代码和文件的Python包
2. tests/,  一个包含测试模块的文件夹
3. venv/ , 一个Python虚拟环境，用安装flask和其他依赖的包
4. 告诉Python 如何安装项目的安装文件
5. 版本控制配置，如git
6. 项目需要的其他文件



应用设置

编辑 __init__.py

一个Flask应用就是一个Flask类的实例。应用的所有东西（如配置和URL）都会和这个实例一起注册

可以在一个函数内部创建Flask实例来代替创建全局实例。这个函数被称为工厂函数。所有应用相关的配置、注册
和其他设置都会在函数内部完成，然后返回这个应用

应用工厂  创建flaskr文件夹中的__init__.py文件，有两个作用：1.包含应用工厂，2.告诉python它是一个包

create_app 是一个应用工厂函数。

1.app = Flask(__name__,instance_relative_config=True) 创建一个Flask实例
2. app.config.from_mapping()设置一个应用的缺省配置
 SECRET_KEY 是被flask和扩展用于保证数据安全的
 DATABASE SQLite 数据库文件存放在路径

3. app.config.from_pyfile()使用config.py中的值来重载缺省配置
4.  os.makedirs()可以确保app.instance_path存在
5.@app.route()创建路由

在项目文件夹中使用

export FLASK_APP=flaskr
export FLASK_ENV=development
flask run



定义和操作数据库

应用使用一个sqlite数据库来存储用户和博客内容。

1.连接数据库
创建一个数据库的连接。所有查询和操作都要通过该连接来执行，完事后该连接关闭
在网络应用中连接往往与请求绑定。在处理请求的某个时刻，连接被创建。在发送响应之前连接被关闭

编辑db.py

(1)g 是一个特殊对象，独立于每个请求.在处理请求过程中，它可以用于存储可能多个函数都会用到的数据。
把连接存储在其中，可以多次使用，而不用在同一个请求中每次调用get_db时都创建一个新的连接


(2)current_app，该对象指向处理请求的Flask应用
(3)sqlite2.connect()建立一个数据库连接
(4)sqlite3.Row告诉连接返回一个字典的行，这样可以通过列名称来操作数据
(5)close_db 通过检查g.db来确定连接是否建立，如果连接建立，就关闭连接


创建表

数据存储在表和列中。在存储和调用数据之前需要先创建它们。flaskr会把用户数据存储在user表中，把博客
内容存储在post表中。
编辑 schema.sql

在db.py中添加PYthon函数，用于运行sql命令

(1)open_resource()打开一个文件，该文件名是相对于flaskr包的。get_db返回一个数据库连接，用于执行文件中的命令
(2）click.command()定义一个名为init-db命令行，它调用init_db函数，并为用户显示一个成功的消息



在应用中注册

close_db 和 init_db_command函数需要在应用实例中注册，否则无法使用。既然用了工厂函数，淹没在写函数
的时候引用实例还无法使用。可以再写一个函数，把应用作为参数，在函数中进行注册

编辑 db.py

app.teardown_appcontext() 告诉Flask在返回响应后进行清理的时候调用此函数
app.cli.add_command() 添加一个新的可以与 flask一起工作的命令

在工厂中导入并调用这个函数。在工厂函数中把新的代码放到函数的尾部，返回应用代码的前面

编辑 __init__.py

初始化数据库文件

现在init-db 已经在应用中注册好了，可以与flask命令一起 使用了  flask init-db  (使用又有问题了！)




蓝图和视图

视图函数是一个应用对请求进行响应的函数。Flask通过模型把进来的请求URL匹配到对应的处理视图。视图返回数据，Flask把数据变成出去的响应。
Flask也可以反过来，根据视图的名称和参数生成URL

创建蓝图

Blueprint 是一种组织一组相关视图及其其他代码的方式。与把视图及其其他代码直接注册到应用的方式不同，蓝图方式是把他们注册到蓝图，然后
在工厂函数这种把蓝图注册应用。
  蓝图--->工厂函数----注册应用

Flaskr有两个蓝图，一个用于认证功能，另一个用于博客帖子管理。每个蓝图的代码都在一个单独的模块中，使用博客首先需要认证，
编辑 auth.py

1.创建一个名为‘auth’的Blueprint,和应用对象一样，把__name__作为第二个参数，要知道定义在哪里，url_prefix
会添加到所有与该蓝图关联的URL前面
2. 使用 app.register_blueprint()导入并注册蓝图。新的代码放在工厂函数的尾部返回应用之前

编辑 __init__.py

认证蓝图将包括注册新用户、登录和注销视图。


第一个视图：注册
编辑 auth.py
登录 ，注销  验证

端点和URL
url_for() 函数根据视图名称和发生成 URL 。视图相关联的名称亦称为 端点 ，缺省情况下，端点名称与视图函数名称相同。

模板 (前端的部分，能简单过就尽可能简单)
基础布局    注册   登录   注册一个用户

静态文件
博客蓝图   索引  创建视图  更新  删除


项目的可安装化  setup.py

测试覆盖（就是测试的方法了！简单过下）

我们使用 pytest 和 coverage 来进行测试和衡量代码。先安装它们：

pip install pytest coverage

部署产品
