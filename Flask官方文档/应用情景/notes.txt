应用情景 --->  应用上下文

应用情境在请求， CLI 命令或其他活动期间跟踪应用级数据。不是将应用程序传递 给每个函数，
而是代之以访问 current_app 和 g 代理。


情境的目的
情境的生命周期
手动推送情境
存储数据
事件和信号


Flask 通过 应用情境 解决了这个问题。不是直接引用一个 app ，而是使用
current_app 代理，该代理指向处理当前活动的应用。
处理请求时， Flask 自动 推送 应用情境。在请求期间运行的视图函数、错误处 理器和其他函数将有权访问 current_app 。


应用情境根据需要创建和销毁。当 Flask 应用开始处理请求时，它会推送应用情境 和 请求情境 。
当请求结束时，它会在请求情境中弹出，然 后在应用情境中弹出。通常，应用情境将具有与请求相同的生命周期。


这通常意味着您试图使用功能需要以某种方式与当前的应用程序对象进行交互。
要解决这个问题，请使用 app.app_context（）设置应用情境。
如果在配置应用时发现错误（例如初始化扩展时），那么可以手动推送上下文。因为 你可以直接访问 app 。
在 with 块中使用 app_context() ， 块中运行的所有内容都可以访问 current_app 。:



存储数据
应用情境是在请求或 CLI 命令期间存储公共数据的好地方。Flask 为此提供了 g 对象 。
它是一个简单的命名空间对象，与应用情境具有相同的生命 周期。

g 的常见用法是在请求期间管理资源。

get_X() 创建资源 X （如果它不存在），将其缓存为 g.X 。
teardown_X() 关闭或以其他方式解除分配资源（如果存在）。它被注册为 teardown_appcontext() 处理器。


在一个请求中，每次调用 get_db() 会返回同一个连接，并且会在请求结束时 自动关闭连接。

你可以使用 LocalProxy 基于 get_db() 生成一个新的本地情境:

from werkzeug.local import LocalProxy
db = LocalProxy(get_db)
访问 db 就会内部调用 get_db ，与 current_app 的工作方式相同。